<?php
/**
 * MerchantApi
 * PHP version 5
 *
 * @category Class
 * @package  Vimando\Api\Merchant
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Merchant API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Vimando\Api\Merchant;

use Vimando\Api\Merchant\Api\MerchantApi;

/**
 * MerchantApi Class Doc Comment
 *
 * @category Class
 * @package  Vimando\Api\Merchant
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VimandoMerchantApi
{
    /**
     * API Client
     *
     * @var \Vimando\Api\Merchant\MerchantApi instance of the MerchantApi
     */
    protected $merchantApi;

    /**
     * Constructor
     *
     */
    public function __construct()
    {
        $this->merchantApi = new MerchantApi();
    }


    /**
     *
     * Provide Auth Information
     * used to authenticate all operations
     *
     * @param $url
     * @param $apiKey
     * @param $username
     * @param $password
     */
    public function authenticate($url, $apiKey, $username, $password)
    {
        // Configure API URL
        Configuration::getDefaultConfiguration()->setHost($url);
        // Configure API key authorization: MERCHANT-KEY
        Configuration::getDefaultConfiguration()->setApiKey('MERCHANT-KEY', $apiKey);
        // Configure HTTP basic authorization: basicAuth
        Configuration::getDefaultConfiguration()->setUsername($username);
        Configuration::getDefaultConfiguration()->setPassword($password);
    }

    public function setDebugMode($debugMode)
    {
        // Configure Debug Output
        Configuration::getDefaultConfiguration()->setDebug($debugMode);
    }

    /**
     * Operation getOrderImport
     *
     * getOrderImport
     *
     * @param string $id id (required)
     * @throws \Vimando\Api\Merchant\ApiException on non-2xx response
     * @return \Vimando\Api\Merchant\Model\OrderImport
     */
    public function getOrderImport($id)
    {
        return $this->merchantApi->getOrderImport($id);
    }


    /**
     * Operation getOrderState
     *
     * getOrderState
     *
     * @param string $id id (required)
     * @throws \Vimando\Api\Merchant\ApiException on non-2xx response
     * @return \Vimando\Api\Merchant\Model\OrderState
     */
    public function getOrderState($id)
    {
        return $this->merchantApi->getOrderState($id);
    }

    /**
     * Operation importOrder
     *
     * importOrder
     *
     * @param object $order order (required)
     * @throws \Vimando\Api\Merchant\ApiException on non-2xx response
     * @return \Vimando\Api\Merchant\Model\OrderImport
     */
    public function importOrder($order)
    {
        return $this->merchantApi->importOrder($order);
    }

    /**
     * Operation listOrderImports
     *
     * listOrderImports
     *
     * @param Integer $page Results page you want to retrieve (1..N) (optional)
     * @param Integer $size Number of records per page. (optional)
     * @throws \Vimando\Api\Merchant\ApiException on non-2xx response
     * @return \Vimando\Api\Merchant\Model\OrderImportList
     */
    public function listOrderImports($page = null, $size = null)
    {
        return $this->merchantApi->listOrderImports($page,$size);
    }

    /**
     * Operation upload
     *
     * upload
     *
     * @param \SplFileObject $file file (required)
     * @throws \Vimando\Api\Merchant\ApiException on non-2xx response
     * @return \Vimando\Api\Merchant\Model\UploadedFile
     */
    public function upload($file)
    {
        return $this->merchantApi->upload($file);
    }

    /**
     * Returns ErrorResponse Object from ApiException
     * @param $apiException \Vimando\Api\Merchant\ApiException
     * @return \Vimando\Api\Merchant\Model\ErrorResponse
     */
    public function getErrorResponse($apiException)
    {
        return $apiException->getResponseObject();
    }

    /* ------------------ Return Codes Constants ------------------ */

    const CODES_ErrorResponse_ERROR                  = 'api-error';
    const CODES_ErrorResponse_RESOURCE_NOT_FOUND     = 'api-resource-not-found';
    const CODES_ErrorResponse_KEY_INVALID            = 'api-key-invalid';
    const CODES_ErrorResponse_OPERATION_NOT_ALLOWED  = 'api-operation-not-allowed';

    const CODES_OrderImport_IMPORTING = '1';
    const CODES_OrderImport_IMPORTED  = '2';
    const CODES_OrderImport_DELETED   = '3';
    const CODES_OrderImport_FAILED    = '4';

    const CODES_OrderState_ORDER_RECIVED                  = '1';
    const CODES_OrderState_WAITING_FOR_PAYMENT_ADVANCE    = '2';
    const CODES_OrderState_WAITING_FOR_PAYMENT            = '3';
    const CODES_OrderState_WAITING_FOR_PAYMENT_REMINDER   = '4';
    const CODES_OrderState_WAITING_FOR_PAYMENT_DUNNING_1  = '5';
    const CODES_OrderState_WAITING_FOR_PAYMENT_DUNNING_2  = '6';
    const CODES_OrderState_WAITING_FOR_PAYMENT_OUTSOURCED = '7';
    const CODES_OrderState_ORDER_COMPLETED                = '8';
    const CODES_OrderState_ORDER_INPRODUCTION             = '9';

    const CODES_OrderDelivery_ORDER_RECIVED          = '1';
    const CODES_OrderDelivery_ORDER_INPRODUCTION     = '2';
    const CODES_OrderDelivery_ORDER_READYFORSHIPPING = '3';
    const CODES_OrderDelivery_ORDER_SHIPPED          = '4';

}
