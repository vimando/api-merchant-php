<?php
/**
 * Customer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Vimando\Api\Merchant
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Merchant API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Vimando\Api\Merchant\Model;

use \ArrayAccess;

/**
 * Customer Class Doc Comment
 *
 * @category    Class
 * @package     Vimando\Api\Merchant
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Customer implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Customer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'city' => 'string',
        'company' => 'string',
        'country' => 'string',
        'email' => 'string',
        'firstname' => 'string',
        'lastname' => 'string',
        'salutation' => 'string',
        'street' => 'string',
        'street_additional' => 'string',
        'street_number' => 'string',
        'zip' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'city' => null,
        'company' => null,
        'country' => null,
        'email' => null,
        'firstname' => null,
        'lastname' => null,
        'salutation' => null,
        'street' => null,
        'street_additional' => null,
        'street_number' => null,
        'zip' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'city' => 'city',
        'company' => 'company',
        'country' => 'country',
        'email' => 'email',
        'firstname' => 'firstname',
        'lastname' => 'lastname',
        'salutation' => 'salutation',
        'street' => 'street',
        'street_additional' => 'streetAdditional',
        'street_number' => 'streetNumber',
        'zip' => 'zip'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'city' => 'setCity',
        'company' => 'setCompany',
        'country' => 'setCountry',
        'email' => 'setEmail',
        'firstname' => 'setFirstname',
        'lastname' => 'setLastname',
        'salutation' => 'setSalutation',
        'street' => 'setStreet',
        'street_additional' => 'setStreetAdditional',
        'street_number' => 'setStreetNumber',
        'zip' => 'setZip'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'city' => 'getCity',
        'company' => 'getCompany',
        'country' => 'getCountry',
        'email' => 'getEmail',
        'firstname' => 'getFirstname',
        'lastname' => 'getLastname',
        'salutation' => 'getSalutation',
        'street' => 'getStreet',
        'street_additional' => 'getStreetAdditional',
        'street_number' => 'getStreetNumber',
        'zip' => 'getZip'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const COUNTRY_BE = 'BE';
    const COUNTRY_BG = 'BG';
    const COUNTRY_DE = 'DE';
    const COUNTRY_DK = 'DK';
    const COUNTRY_EE = 'EE';
    const COUNTRY_FI = 'FI';
    const COUNTRY_FR = 'FR';
    const COUNTRY_GR = 'GR';
    const COUNTRY_IE = 'IE';
    const COUNTRY_HR = 'HR';
    const COUNTRY_LV = 'LV';
    const COUNTRY_LT = 'LT';
    const COUNTRY_LU = 'LU';
    const COUNTRY_NL = 'NL';
    const COUNTRY_PL = 'PL';
    const COUNTRY_PT = 'PT';
    const COUNTRY_RO = 'RO';
    const COUNTRY_SE = 'SE';
    const COUNTRY_CH = 'CH';
    const COUNTRY_SK = 'SK';
    const COUNTRY_SI = 'SI';
    const COUNTRY_ES = 'ES';
    const COUNTRY_CZ = 'CZ';
    const COUNTRY_HU = 'HU';
    const COUNTRY_GB = 'GB';
    const COUNTRY_AT = 'AT';
    const SALUTATION__1 = '1';
    const SALUTATION__2 = '2';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCountryAllowableValues()
    {
        return [
            self::COUNTRY_BE,
            self::COUNTRY_BG,
            self::COUNTRY_DE,
            self::COUNTRY_DK,
            self::COUNTRY_EE,
            self::COUNTRY_FI,
            self::COUNTRY_FR,
            self::COUNTRY_GR,
            self::COUNTRY_IE,
            self::COUNTRY_HR,
            self::COUNTRY_LV,
            self::COUNTRY_LT,
            self::COUNTRY_LU,
            self::COUNTRY_NL,
            self::COUNTRY_PL,
            self::COUNTRY_PT,
            self::COUNTRY_RO,
            self::COUNTRY_SE,
            self::COUNTRY_CH,
            self::COUNTRY_SK,
            self::COUNTRY_SI,
            self::COUNTRY_ES,
            self::COUNTRY_CZ,
            self::COUNTRY_HU,
            self::COUNTRY_GB,
            self::COUNTRY_AT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSalutationAllowableValues()
    {
        return [
            self::SALUTATION__1,
            self::SALUTATION__2,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['firstname'] = isset($data['firstname']) ? $data['firstname'] : null;
        $this->container['lastname'] = isset($data['lastname']) ? $data['lastname'] : null;
        $this->container['salutation'] = isset($data['salutation']) ? $data['salutation'] : null;
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['street_additional'] = isset($data['street_additional']) ? $data['street_additional'] : null;
        $this->container['street_number'] = isset($data['street_number']) ? $data['street_number'] : null;
        $this->container['zip'] = isset($data['zip']) ? $data['zip'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getCountryAllowableValues();
        if (!in_array($this->container['country'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'country', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getSalutationAllowableValues();
        if (!in_array($this->container['salutation'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'salutation', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getCountryAllowableValues();
        if (!in_array($this->container['country'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getSalutationAllowableValues();
        if (!in_array($this->container['salutation'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     * @param string $city
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets company
     * @return string
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     * @param string $company
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets country
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     * @param string $country
     * @return $this
     */
    public function setCountry($country)
    {
        $allowed_values = $this->getCountryAllowableValues();
        if (!is_null($country) && !in_array($country, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'country', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets firstname
     * @return string
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     * @param string $firstname
     * @return $this
     */
    public function setFirstname($firstname)
    {
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets lastname
     * @return string
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     * @param string $lastname
     * @return $this
     */
    public function setLastname($lastname)
    {
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets salutation
     * @return string
     */
    public function getSalutation()
    {
        return $this->container['salutation'];
    }

    /**
     * Sets salutation
     * @param string $salutation
     * @return $this
     */
    public function setSalutation($salutation)
    {
        $allowed_values = $this->getSalutationAllowableValues();
        if (!is_null($salutation) && !in_array($salutation, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'salutation', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['salutation'] = $salutation;

        return $this;
    }

    /**
     * Gets street
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     * @param string $street
     * @return $this
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets street_additional
     * @return string
     */
    public function getStreetAdditional()
    {
        return $this->container['street_additional'];
    }

    /**
     * Sets street_additional
     * @param string $street_additional
     * @return $this
     */
    public function setStreetAdditional($street_additional)
    {
        $this->container['street_additional'] = $street_additional;

        return $this;
    }

    /**
     * Gets street_number
     * @return string
     */
    public function getStreetNumber()
    {
        return $this->container['street_number'];
    }

    /**
     * Sets street_number
     * @param string $street_number
     * @return $this
     */
    public function setStreetNumber($street_number)
    {
        $this->container['street_number'] = $street_number;

        return $this;
    }

    /**
     * Gets zip
     * @return string
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     * @param string $zip
     * @return $this
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Vimando\Api\Merchant\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Vimando\Api\Merchant\ObjectSerializer::sanitizeForSerialization($this));
    }
}


